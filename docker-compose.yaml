version: "3"
networks:
  knowstr:
    driver: bridge
services:
  traefik:
    networks:
      - knowstr
    image: traefik:v3.0
    ports:
      - 3001:3001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--providers.docker"
      - "--entrypoints.web.address=:3001"
  reader:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    environment:
      KNOWSTR_REDIS_URL: ${KNOWSTR_REDIS_URL:-redis://redis:6379}
      KNOWSTR_PULSAR_URL: ${KNOWSTR_PULSAR_URL:-pulsar://broker:6650}
    build:
      context: ./examples/reader
    depends_on:
      redis:
        condition: service_healthy
      broker:
        condition: service_started
  scheduler:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    restart: unless-stopped
    command: npm run scheduler
    environment:
      KNOWSTR_REDIS_URL: ${KNOWSTR_REDIS_URL:-redis://redis:6379}
    build:
      context: .
    depends_on:
      redis:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
  worker:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    restart: unless-stopped
    command: npm run worker
    environment:
      KNOWSTR_REDIS_URL: ${KNOWSTR_REDIS_URL:-redis://redis:6379}
      KNOWSTR_PULSAR_URL: ${KNOWSTR_PULSAR_URL:-pulsar://broker:6650}
      KNOWSTR_KNOWSTR_FOLLOW_REDIRECTS: "true"
    build:
      context: .
    deploy:
      replicas: 3
    depends_on:
      scheduler:
        condition: service_started
      redis:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
  web:
    networks:
      - knowstr
    restart: unless-stopped
    command: npm run web
    environment:
      KNOWSTR_REDIS_URL: ${KNOWSTR_REDIS_URL:-redis://redis:6379}
      KNOWSTR_PULSAR_URL: ${KNOWSTR_PULSAR_URL:-pulsar://broker:6650}
      KNOWSTR_BROKER_API_URL: ${KNOWSTR_BROKER_API_URL:-http://broker:8080}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.routers.web.rule=Host(`localhost`)"
      - "traefik.http.routers.web.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=knowstr:$$2y$$05$$X9Tw/O1rh5K/oFbZLLt8c.X0fZe1JyN4hdbHCWk4adGORLoLd9goO"
    build:
      context: .
    deploy:
      replicas: 1
    depends_on:
      scheduler:
        condition: service_started
      redis:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
  redis:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    image: redis:7
    volumes:
      - ./docker/redis-data:/data
    command: redis-server --io-threads 4 --io-threads-do-reads yes --appendonly no --maxmemory-policy noeviction --bind 0.0.0.0 --maxclients 10000 --tcp-backlog 511
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 3s
      timeout: 5s
      retries: 5
  # Start zookeeper
  zookeeper:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    image: apachepulsar/pulsar:3.1.1
    container_name: zookeeper
    user: root
    restart: on-failure
    volumes:
      - ./docker/zookeeper-data:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - PULSAR_MEM=-Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

  # # Init cluster metadata
  pulsar-init:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:3.1.1
    command: >
      bin/pulsar initialize-cluster-metadata \
               --cluster cluster-a \
               --zookeeper zookeeper:2181 \
               --configuration-store zookeeper:2181 \
               --web-service-url http://broker:8080 \
               --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

  # # Start bookie
  bookie:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    image: apachepulsar/pulsar:3.1.1
    container_name: bookie
    restart: on-failure
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
      # otherwise every time we run docker compose uo or down we fail to start due to Cookie
      # See: https://github.com/apache/bookkeeper/blob/405e72acf42bb1104296447ea8840d805094c787/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java#L57-68
      - advertisedAddress=bookie
      - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./docker/bookkeeper-data:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"

  # # Start broker
  broker:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    image: apachepulsar/pulsar:3.1.1
    container_name: broker
    hostname: broker
    restart: on-failure
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=${KNOWSTR_PULSAR_ADVERTISED_ADDRESS:-broker}
      - advertisedListeners=${KNOWSTR_PULSAR_ADVERTISED_LISTENERS:-external:pulsar://127.0.0.1:6650,internal:pulsar://broker:6650}
      - internalListenerName=${KNOWSTR_PULSAR_INTERNAL_LISTENER_NAME:-internal}
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"
  dashboard:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    image: apachepulsar/pulsar-manager:v0.2.0
    ports:
      - "9527:9527"
    depends_on:
      - broker
    links:
      - broker
    environment:
      SPRING_CONFIGURATION_FILE: /pulsar-manager/pulsar-manager/application.properties
  dashboard-setup:
    networks:
      - knowstr
    labels:
      - "traefik.enable=false"
    image: quay.io/curl/curl:latest
    restart: on-failure
    depends_on:
      dashboard:
        condition: service_started
    command: sh -c 'chmod +x /scripts/dashboard-setup.sh && /scripts/dashboard-setup.sh'
    volumes:
      - ./docker/scripts/dashboard-setup.sh:/scripts/dashboard-setup.sh
